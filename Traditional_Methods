
import cv2
import numpy as np


from skimage import filters
from skimage.util import view_as_blocks
from scipy.ndimage import convolve
from skimage import io
from PIL import Image

def compute_hog_descriptor(image_patch, cell_size=(8, 8)):
    """
    Compute Histogram of Oriented Gradients (HOG) descriptor for a given grayscale image patch.

    Steps:
      1. Compute gradient magnitude and orientation.
      2. Accumulate gradient contributions into histogram bins per cell.
      3. Normalize the histograms and flatten into a 1D descriptor.

    Args:
        image_patch (np.ndarray): Grayscale image of shape (height, width).
        cell_size (tuple): Tuple defining the size of each cell (default is (8, 8)).

    Returns:
        np.ndarray: 1D HOG descriptor.
    """
    # Ensure image dimensions are multiples of the cell dimensions.
    assert image_patch.shape[0] % cell_size[0] == 0, "Height is not a multiple of cell height."
    assert image_patch.shape[1] % cell_size[1] == 0, "Width is not a multiple of cell width."

    num_bins = 9
    degrees_per_bin = 180 // num_bins

    # Compute gradients using Sobel filters.
    gradient_x = filters.sobel_v(image_patch)
    gradient_y = filters.sobel_h(image_patch)
    gradient_magnitude = np.sqrt(gradient_x**2 + gradient_y**2)
    gradient_angle = (np.arctan2(gradient_y, gradient_x) * 180 / np.pi) % 180

    # Divide the gradients into cells.
    magnitude_cells = view_as_blocks(gradient_magnitude, block_shape=cell_size)
    angle_cells = view_as_blocks(gradient_angle, block_shape=cell_size)
    num_cell_rows, num_cell_cols = magnitude_cells.shape[0], magnitude_cells.shape[1]

    # Initialize histogram for each cell.
    cell_histograms = np.zeros((num_cell_rows, num_cell_cols, num_bins))

    # Populate histogram bins for each cell.
    for i in range(num_cell_rows):
        for j in range(num_cell_cols):
            for m in range(magnitude_cells.shape[2]):
                for n in range(magnitude_cells.shape[3]):
                    bin_index = int(angle_cells[i, j, m, n] // degrees_per_bin)
                    # Ensure bin_index does not exceed maximum
                    if bin_index >= num_bins:
                        bin_index = num_bins - 1
                    cell_histograms[i, j, bin_index] += magnitude_cells[i, j, m, n]

    # Normalize histograms and flatten into a descriptor.
    cell_histograms = (cell_histograms - np.mean(cell_histograms)) / (np.std(cell_histograms) + 1e-6)
    descriptor = cell_histograms.reshape(-1)
    return descriptor


def interpret_hog_descriptors(file_paths):
    """
    Process a list of image file paths to extract HOG descriptors and compare each descriptor
    against a reference image's descriptor ("images/reference.jpg").

    For each image:
      - Loads the image.
      - Converts to grayscale if it contains 3 channels.
      - Adjusts image dimensions so that both height and width are divisible by 8.
      - Computes the HOG descriptor and retains the first 10 elements.

    The reference descriptor (from "images/reference.jpg") is used for comparison:
    filenames with descriptors deviating from the reference are returned.

    Args:
        file_paths (list of str): List of image file paths.

    Returns:
        list of str: Filenames whose HOG descriptor deviates from the reference image.
    """
    descriptor_dict = {}

    for path in file_paths:
        # Load image using skimage.
        image = io.imread(path)

        # Convert RGB to grayscale if necessary.
        if image.ndim == 3 and image.shape[2] == 3:
            image = (0.2989 * image[:, :, 0] +
                     0.5870 * image[:, :, 1] +
                     0.1140 * image[:, :, 2])
        image = image.astype(np.float32)

        # Ensure dimensions are divisible by 8.
        height, width = image.shape
        height_new = height - height % 8
        width_new = width - width % 8
        image = image[:height_new, :width_new]

        descriptor = compute_hog_descriptor(image)
        # Store only the first 10 elements of the HOG descriptor.
        descriptor_dict[path] = descriptor[:10]

    # Retrieve and remove the reference image descriptor.
    reference_descriptor = descriptor_dict.pop("images/reference.jpg")

    defect_files = []
    # Compare each image's descriptor with the reference descriptor.
    for path, desc in descriptor_dict.items():
        if not np.allclose(desc, reference_descriptor):
            defect_files.append(path)

    return defect_files


def compute_harris_response(image, window_size=3, sensitivity=0.04):
    """
    Compute the Harris corner response for a given grayscale image.

    The response is defined as:
        R = det(M) - sensitivity * (trace(M)^2)
    where M is the second moment matrix computed from image gradients.

    Args:
        image (np.ndarray): Grayscale image of shape (height, width).
        window_size (int): Size of the window used for summing gradient products (default is 3).
        sensitivity (float): Harris detector sensitivity parameter (default is 0.04).

    Returns:
        np.ndarray: Harris response image of shape (height, width).
    """
    height, width = image.shape
    window = np.ones((window_size, window_size))

    # Compute image gradients.
    gradient_x = filters.sobel_v(image)
    gradient_y = filters.sobel_h(image)

    # Compute products of gradients and convolve with window.
    Ix2 = convolve(gradient_x ** 2, window)
    Ixy = convolve(gradient_x * gradient_y, window)
    Iy2 = convolve(gradient_y ** 2, window)

    response = np.zeros((height, width))
    for i in range(height):
        for j in range(width):
            M = np.array([[Ix2[i, j], Ixy[i, j]],
                          [Ixy[i, j], Iy2[i, j]]])
            response[i, j] = np.linalg.det(M) - sensitivity * (np.trace(M) ** 2)
    return response


def interpret_harris_response(file_paths):
    """
    Process a list of image file paths using Harris corner detection.
    For each image:
      - Open the image and convert it to grayscale.
      - Compute the Harris corner response.

    The reference response from "images/reference.jpg" is used for comparison.
    Files whose response deviates from the reference are considered to have significant corners.

    Args:
        file_paths (list of str): List of image file paths.

    Returns:
        list of str: Filenames for which significant corners were detected (non-matching response).
    """
    response_dict = {}

    for path in file_paths:
        # Open and convert image to grayscale.
        img = Image.open(path).convert('L')
        img_array = np.array(img)
        response_dict[path] = compute_harris_response(img_array, window_size=3, sensitivity=0.04)

    # Retrieve and remove the reference image's response.
    reference_response = response_dict.pop("images/reference.jpg")

    defect_files = []
    for path, resp in response_dict.items():
        if not np.allclose(resp, reference_response):
            defect_files.append(path)
    return defect_files


def compute_sift_features(image):
    """
    Compute SIFT keypoints and descriptors for the given grayscale image.

    Args:
        image (np.ndarray): Grayscale image of shape (height, width).

    Returns:
        tuple: A tuple (keypoints, descriptors) where keypoints is a list of cv2.KeyPoint objects
               and descriptors is a numpy array of shape (num_keypoints, 128) or None if no keypoints are found.
    """
    sift = cv2.SIFT_create()
    keypoints, descriptors = sift.detectAndCompute(image, None)
    return keypoints, descriptors


def interpret_sift_features(file_paths):
    """
    Process a list of image file paths using SIFT feature extraction.
    For each image, if SIFT keypoints are detected, the filename is added to the result list.

    Args:
        file_paths (list of str): List of image file paths.

    Returns:
        list of str: Filenames for which SIFT keypoints were detected.
    """
    defect_files = []
    for path in file_paths:
        image = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
        keypoints, _ = compute_sift_features(image)
        if keypoints is not None and len(keypoints) > 0:
            defect_files.append(path)
    return defect_files
